# Import libraries
library(caret)
library(ggplot2)
library(lattice)
library(dplyr)
library(corrplot)
library(VIM)
library(tidyr)
library(tibble)
library(readr)
library(purrr)
library(stringr)
library(forcats)
library(bigmemory)
library(class)
install.packages("bigmemory")
library(bigmemory)
library(class)
install.packages("class")
library(class)
library(class)
# Import / Inspect Data
neo_df <- read.csv("neo.csv", header = T,
na.strings = "?", stringsAsFactors = T)
# Import / Inspect Data
neo_df <- read.csv("neo.csv", header = T,
na.strings = "?", stringsAsFactors = T)
head(neo_df)
names(neo_df)
dim(neo_df)
View(neo_df)
summary(neo_df)
pairs(neo_df)
pairs(neo_df[,3:6])
# Clean Data & Remove unnecessary variables
neo_df <- neo_df[, -1]
neo_df <- neo_df[, -6]
View(neo_df)
neo_df <- neo_df[, -6]
View(neo_df)
# Separate continuous and categorical variables
num_neo <- neo_df %>% select(where(is.numeric))
# Import libraries
library(caret)
library(ggplot2)
library(lattice)
library(dplyr)
library(corrplot)
library(VIM)
library(tidyr)
library(tibble)
library(readr)
library(purrr)
library(stringr)
library(forcats)
library(bigmemory)
library(class)
# Separate continuous and categorical variables
num_neo <- neo_df %>% select(where(is.numeric))
cat_neo <- neo_df %>% select(where(is.factor))
View(num_neo)
View(cat_neo)
# Explore Data
pairs(num_neo)
max(num_neo)
max(num_neo[,1:2])
max(num_neo[,1)
max(num_neo[,1])
ggpairs(num_neo[,3:5])
library(ggplot2)
ggpairs(num_neo[,3:5])
library(GGally)
install.packages("GGally")
library(GGally)
ggpairs(num_neo[,3:5])
neo_pairs_plot <- ggpairs(num_neo[,3:5])
df_1 <- num_neo[,3:5]
ggplot(gather(num_neo), aes(value), binwidth = 0.5) +
geom_histogram() +
ggtitle("Numeric Variables") +
facet_wrap(~key, scales = 'free') +
theme(plot.title = element_text(hjust = 0.4))
ggplot(df_1, aes(value), binwidth = 0.5) +
geom_histogram() +
ggtitle("Numeric Variables") +
facet_wrap(~key, scales = 'free') +
theme(plot.title = element_text(hjust = 0.4))
ggplot(df_1, aes(value), binwidth = 0.5) +
geom_histogram() +
ggtitle("Numeric Variables") +
theme(plot.title = element_text(hjust = 0.4))
?ggplot
ggplot(df_1, aes(absolute_magnitude, relative_velocity), binwidth = 0.5) +
geom_histogram() +
ggtitle("Magnitude to Veolcity") +
theme(plot.title = element_text(hjust = 0.4))
ggplot(df_1, aes(value), binwidth = 0.5) +
geom_histogram() +
ggtitle("Magnitude to Veolcity") +
theme(plot.title = element_text(hjust = 0.4))
ggplot(df_1, aes(x = absolute_magnitude), binwidth = 0.5) +
geom_histogram() +
ggtitle("Magnitude to Veolcity") +
theme(plot.title = element_text(hjust = 0.4))
# Visualizing relative_velocity, miss_distance, and absolute_magnitude
ggplot(df_1, aes(x = absolute_magnitude, y = relative_velocity), binwidth = 0.5) +
geom_point() +
ggtitle("Magnitude to Veolcity") +
theme(plot.title = element_text(hjust = 0.4))
# Visualizing relative_velocity, miss_distance, and absolute_magnitude
ggplot(df_1, aes(x = absolute_magnitude, y = relative_velocity), binwidth = 0.5) +
geom_point(alpha = 0.1) +
ggtitle("Magnitude to Veolcity") +
theme(plot.title = element_text(hjust = 0.4))
# Visualizing relative_velocity, miss_distance, and absolute_magnitude
vel_mag_plot1 <- ggplot(df_1, aes(x = absolute_magnitude, y = relative_velocity), binwidth = 0.5) +
geom_point(alpha = 0.1) +
ggtitle("Magnitude to Veolcity") +
theme(plot.title = element_text(hjust = 0.4))
contrasts(neo_df$hazardous)
# Test for significant relationships
lm.fit1 <- lm(miss_distance ~ relative_velocity +
absolute_magnitude, data = df_1)
summary(lm.fit1)
plot(lm.fit1)
save.image("C:/Users/cau4/OneDrive/Desktop/Spring 2023/ISOM 330/Team5_FinalProj/Team5_FinalProj/Team5_FinalProj.RData")
savehistory("C:/Users/cau4/OneDrive/Desktop/Spring 2023/ISOM 330/Team5_FinalProj/Team5_FinalProj/Team5_FinalProj.Rhistory")
# Test for Multicollinearity
?vif
# Test for Multicollinearity
VIF(lm.fit1)
# Test for Multicollinearity
vif(lm.fit1)
par(mfrow=c(2,2))
library(VIM)
corrplot(df_1)
corrplot(df_1)
View(df_1)
?corrplot
corrplot(num_neo)
df1_cor <- cor(df_1)
df1_cor
corrplot(df1_cor)
save.image("C:/Users/cau4/OneDrive/Desktop/Spring 2023/ISOM 330/Team5_FinalProj/Team5_FinalProj/Team5_FinalProj.RData")
savehistory("C:/Users/cau4/OneDrive/Desktop/Spring 2023/ISOM 330/Team5_FinalProj/Team5_FinalProj/Team5_FinalProj.Rhistory")
lm.fit1 <- lm(miss_distance ~ est_diameter_min + est_diameter_max +
absolute_magnitude, data = neo_df)
summary(lm.fit1)
plot(lm.fit1)
lm.fit2 <- lm(miss_distance ~ est_diameter_min + relative_velocity +
absolute_magnitude, data = neo_df)
summary(lm.fit2)
plot(lm.fit2)
lm.fit3 <- lm(miss_distance ~ relative_velocity +
absolute_magnitude, data = df_1)
summary(lm.fit1)
plot(lm.fit1)
save.image("C:/Users/cau4/OneDrive/Desktop/Spring 2023/ISOM 330/Team5_FinalProj/Team5_FinalProj/Team5_FinalProj.RData")
# Test for Multicollinearity
savehistory("C:/Users/cau4/OneDrive/Desktop/Spring 2023/ISOM 330/Team5_FinalProj/Team5_FinalProj/Team5_FinalProj.Rhistory")
library(HH)
install.packages("HH")
library(HH)
# Test for Multicollinearity
vif(lm.fit1)
# Test for Multicollinearity
vif(lm.fit3)
save.image("C:/Users/cau4/OneDrive/Desktop/Spring 2023/ISOM 330/Team5_FinalProj/Team5_FinalProj/Team5_FinalProj.RData")
savehistory("C:/Users/cau4/OneDrive/Desktop/Spring 2023/ISOM 330/Team5_FinalProj/Team5_FinalProj/Team5_FinalProj.Rhistory")
